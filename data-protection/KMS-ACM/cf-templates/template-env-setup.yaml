AWSTemplateFormatVersion: "2010-09-09"

Description: This AWS CloudFormation Template creates the necessary resources for the data encryption builders session 

Parameters:
  
   ResourceName:
      Type: String
      Default: builders
      Description: Prefix for resources created in this session.
      
   InstanceType: 
    Type: String
    Default: t2.medium
    AllowedValues: 
      - t2.micro
      - t2.medium
    Description: Pick a instance type for the Cloud9 environment 
      
# This IAM user will be used for all login and development
Resources:

   SystemVPC:
      Type: AWS::EC2::VPC
      Properties:
         CidrBlock: 192.168.0.0/16
         EnableDnsHostnames: true
         EnableDnsSupport: true
         Tags:
            - Key: vpc-for-what
              Value: system-vpc
   
   InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
         Tags:
            - Key: Name
              Value: !Ref ResourceName
              
   GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
         InternetGatewayId:
           Ref: InternetGateway
         VpcId: !Ref SystemVPC
         
   RouteTable:
      DependsOn:
      - SystemVPC
      Type: AWS::EC2::RouteTable
      Properties:
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref SystemVPC
         
   PublicRoute:
      DependsOn:
         - RouteTable
         - GatewayAttachment
      Type: AWS::EC2::Route
      Properties:
         DestinationCidrBlock: 0.0.0.0/0
         GatewayId: !Ref InternetGateway
         RouteTableId: !Ref RouteTable
         
   Subnet:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 192.168.0.0/24
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref SystemVPC
         AvailabilityZone: 
            Fn::Select: 
               - 0
               - Fn::GetAZs: ""
         
   SubnetAssoc:
      DependsOn:
         - Subnet
         - RouteTable
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId: !Ref RouteTable
         SubnetId: !Ref Subnet
   
   SubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
         CidrBlock: 192.168.128.0/24
         MapPublicIpOnLaunch: true
         Tags:
           - Key: Name
             Value: !Ref ResourceName
         VpcId: !Ref SystemVPC
         AvailabilityZone: 
            Fn::Select: 
               - 1
               - Fn::GetAZs: ""
         
   SubnetTwoAssoc:
      DependsOn:
         - SubnetTwo
         - RouteTable
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
         RouteTableId: !Ref RouteTable
         SubnetId: !Ref SubnetTwo
         
   PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId: !Ref SystemVPC
         Tags:
           -
            Key: Network
            Value: Public
            
   InboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: false
         CidrBlock: '0.0.0.0/0'
         PortRange:
           From: 0
           To: 65535
           
   OutboundPublicNACLEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId: !Ref PublicNACL
         RuleNumber: 100
         Protocol: -1
         RuleAction: allow
         Egress: true
         CidrBlock: 0.0.0.0/0
         PortRange:
           From: 0
           To: 65535
           
   SubnetNACLAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
         SubnetId: !Ref Subnet
         NetworkAclId: !Ref PublicNACL
         
   SubnetTwoNACLAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
         SubnetId: !Ref SubnetTwo
         NetworkAclId: !Ref PublicNACL
         
   S3Bucket: 
      DeletionPolicy: Retain
      Type: AWS::S3::Bucket
      Properties: {}
   BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
         Bucket: 
            Ref: S3Bucket
         PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
               - 
                  Sid: "AWSCloudTrailAclCheck"
                  Effect: "Allow"
                  Principal: 
                     Service: "cloudtrail.amazonaws.com"
                  Action: "s3:GetBucketAcl"
                  Resource: 
                     !Sub |-
                     arn:aws:s3:::${S3Bucket}
               - 
                  Sid: "AWSCloudTrailWrite"
                  Effect: "Allow"
                  Principal: 
                     Service: "cloudtrail.amazonaws.com"
                  Action: "s3:PutObject"
                  Resource:
                     !Sub |-
                     arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
                  Condition: 
                     StringEquals:
                        s3:x-amz-acl: "bucket-owner-full-control"
    
   SystemTrail: 
      DependsOn: 
         - BucketPolicy
      Type: AWS::CloudTrail::Trail
      Properties: 
         S3BucketName: 
            Ref: S3Bucket
         IsLogging: true

   cryptocloud9env:
      Type : AWS::Cloud9::EnvironmentEC2
      Properties: 
         Description: "Cloud9 environment for the crypto builders python modules"
         AutomaticStopTimeMinutes: 60
         InstanceType: !Ref InstanceType
         Name: "workshop-environment"
         SubnetId: !Ref Subnet
         Repositories: 
            - PathComponent: /data-protection/KMS-ACM
              RepositoryUrl: https://github.com/sessin/awskmshol/data-protection/KMS-ACM/

   # We will use admin privileges for now and make it least privilege as we learn
   cryptocloudninerole:
      Type : AWS::IAM::Role
      Properties:
         RoleName: 'cryptobuildercloudninerole'
         AssumeRolePolicyDocument: 
           Version: "2012-10-17"
           Statement: 
             - 
               Effect: "Allow"
               Principal: 
                 Service: 
                   - "ec2.amazonaws.com"
                   - "cloud9.amazonaws.com"
               Action: 
                 - "sts:AssumeRole"
         
   # Policy for a user trying out modules on a Cloud9 environment 
   cryptocloudninepolicy:
      Type : AWS::IAM::Policy
      Properties: 
         PolicyName : 'cryptobuilder-cloudnine-policy'
         PolicyDocument : 
            Version: "2012-10-17"
            Statement:
              -
               Effect: "Allow"
               Action: "*"
               Resource: "*"
         Roles:
            - !Ref cryptocloudninerole
         
Outputs: 
   SYSTEMVPC: 
      Value: !Ref SystemVPC
      Export:
         Name: !Sub "${ResourceName}-systemvpc"     
   SYSTEMSUBNETAZ1: 
      Value: !Ref Subnet
      Export:
         Name: !Sub "${ResourceName}-subnetaz1"
   SYSTEMSUBNETAZ2: 
      Value: !Ref SubnetTwo
      Export:
         Name: !Sub "${ResourceName}-subnetaz2"
   STACKREGION:
      Value: !Ref "AWS::Region"
      Export:
         Name: !Sub "${ResourceName}-stackregion"
   DEFAULTSECURITYGROUPSYSTEMVPC:
      Value: !GetAtt SystemVPC.DefaultSecurityGroup
      Export:
         Name: !Sub "${ResourceName}-defaultsystemsecuritygroup"
   
